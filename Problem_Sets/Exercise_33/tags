!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CFLAGS	Makefile	/^CFLAGS=-g -O2 -Wall -Wextra -Isrc -rdynamic -DNDEBUG $(OPTFLAGS)$/;"	m
LIBS	Makefile	/^LIBS=-ldl $(OPTLIBS)$/;"	m
LIST_FOREACH	src/lcthw/list.h	/^#define LIST_FOREACH(/;"	d
List	src/lcthw/list.h	/^typedef struct List$/;"	s
List	src/lcthw/list.h	/^} List;$/;"	t	typeref:struct:List
ListNode	src/lcthw/list.h	/^typedef struct ListNode$/;"	s
ListNode	src/lcthw/list.h	/^} ListNode;$/;"	t	typeref:struct:ListNode
List_bubble_sort	src/lcthw/list_algos.c	/^int List_bubble_sort(List *words,List_compare cmp)$/;"	f
List_clear	src/lcthw/list.c	/^void List_clear(List *list)$/;"	f
List_clear_destroy	src/lcthw/list.c	/^void List_clear_destroy(List *list)$/;"	f
List_compare	src/lcthw/list_algos.h	/^typedef int (*List_compare)(const void *a,const void *b);$/;"	t
List_copy	src/lcthw/list.c	/^List * List_copy(const List *copy_from)$/;"	f
List_count	src/lcthw/list.h	/^#define List_count(/;"	d
List_create	src/lcthw/list.c	/^List * List_create()$/;"	f
List_destroy	src/lcthw/list.c	/^void List_destroy(List *list)$/;"	f
List_first	src/lcthw/list.h	/^#define List_first(/;"	d
List_join	src/lcthw/list.c	/^void List_join(List *join_to,List *join_from)$/;"	f
List_last	src/lcthw/list.h	/^#define List_last(/;"	d
List_merge	src/lcthw/list_algos.c	/^List *List_merge(List *left,List *right,List_compare cmp)$/;"	f
List_merge_sort	src/lcthw/list_algos.c	/^List * List_merge_sort(List *words,List_compare cmp)$/;"	f
List_pop	src/lcthw/list.c	/^void * List_pop(List *list)$/;"	f
List_push	src/lcthw/list.c	/^void List_push(List *list,void *value)$/;"	f
List_remove	src/lcthw/list.c	/^void * List_remove(List *list,ListNode *node)$/;"	f
List_shift	src/lcthw/list.c	/^void * List_shift(List *list)$/;"	f
List_split	src/lcthw/list.c	/^void List_split(List *a,List *b)$/;"	f
List_unshift	src/lcthw/list.c	/^void List_unshift(List *list,void *value)$/;"	f
NDEBUG	tests/minunit.h	/^#undef NDEBUG$/;"	d
NUM_VALUES	tests/list_algos_tests.c	/^#define NUM_VALUES /;"	d	file:
OBJECTS	Makefile	/^OBJECTS=$(patsubst %.c,%.o,$(SOURCES))$/;"	m
PREFIX	Makefile	/^PREFIX?=\/usr\/local$/;"	m
RUN_TESTS	tests/minunit.h	/^#define RUN_TESTS(/;"	d
SOURCES	Makefile	/^SOURCES=$(wildcard src\/**\/*.c src\/*.c)$/;"	m
SO_TARGET	Makefile	/^SO_TARGET=$(patsubst %.a,%.so,$(TARGET)) # Shared object (linked during runtime after creation of .o file so if there's any change in .so files, you don't need to recompile your main program; however, the main program needs to be linked to the new .so file with the 'ln' command)$/;"	m
TARGET	Makefile	/^TARGET=build\/liblcthw.a # Archive libraries (statically linked when you compile your program so if there's any change in the library, you need to compile and build your code again)$/;"	m
TESTS	Makefile	/^TESTS=$(patsubst %.c,%,$(TEST_SRC))$/;"	m
TEST_SRC	Makefile	/^TEST_SRC=$(wildcard tests\/*_tests.c)$/;"	m
__dbg_h__	src/lcthw/dbg.h	/^#define __dbg_h__$/;"	d
_minunit_h	tests/minunit.h	/^#define _minunit_h$/;"	d
all_tests	tests/list_algos_tests.c	/^RUN_TESTS(all_tests);$/;"	v
all_tests	tests/list_algos_tests.c	/^char * all_tests()$/;"	f
check	src/lcthw/dbg.h	/^#define check(/;"	d
check_debug	src/lcthw/dbg.h	/^#define check_debug(/;"	d
check_mem	src/lcthw/dbg.h	/^#define check_mem(/;"	d
clean_errno	src/lcthw/dbg.h	/^#define clean_errno(/;"	d
count	src/lcthw/list.h	/^    int count;$/;"	m	struct:List
create_words	tests/list_algos_tests.c	/^List * create_words()$/;"	f
debug	src/lcthw/dbg.h	/^#define debug(/;"	d
first	src/lcthw/list.h	/^    ListNode *first;$/;"	m	struct:List
is_sorted	tests/list_algos_tests.c	/^int is_sorted(List *words)$/;"	f
last	src/lcthw/list.h	/^    ListNode *last;$/;"	m	struct:List
lcthw_List_Algos_h	src/lcthw/list_algos.h	/^#define lcthw_List_Algos_h$/;"	d
lcthw_List_h	src/lcthw/list.h	/^#define lcthw_List_h$/;"	d
log_err	src/lcthw/dbg.h	/^#define log_err(/;"	d
log_info	src/lcthw/dbg.h	/^#define log_info(/;"	d
log_warn	src/lcthw/dbg.h	/^#define log_warn(/;"	d
mu_assert	tests/minunit.h	/^#define mu_assert(/;"	d
mu_run_test	tests/minunit.h	/^#define mu_run_test(/;"	d
mu_suite_start	tests/minunit.h	/^#define mu_suite_start(/;"	d
next	src/lcthw/list.h	/^    struct ListNode *next;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode
prev	src/lcthw/list.h	/^    struct ListNode *prev;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode
sentinel	src/lcthw/dbg.h	/^#define sentinel(/;"	d
test_bubble_sort	tests/list_algos_tests.c	/^char * test_bubble_sort()$/;"	f
test_merge_sort	tests/list_algos_tests.c	/^char * test_merge_sort()$/;"	f
tests_run	tests/minunit.h	/^int tests_run;$/;"	v
value	src/lcthw/list.h	/^    void *value; \/\/ 'value' is a pointer to any type since it's 'void *'$/;"	m	struct:ListNode
values	tests/list_algos_tests.c	/^char *values[] = {"XXXX","1234","abcd","xjvef","NDSS"};$/;"	v
