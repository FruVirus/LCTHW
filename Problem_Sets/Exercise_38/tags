!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BSSSC_BUFF_LEN	src/lcthw/bstrlib.c	/^#define BSSSC_BUFF_LEN /;"	d	file:
BSTRLIB_INCLUDE	src/lcthw/bstrlib.h	/^#define BSTRLIB_INCLUDE$/;"	d
BSTRLIB_NOVSNP	src/lcthw/bstrlib.c	/^#  define BSTRLIB_NOVSNP$/;"	d	file:
BSTRLIB_NOVSNP	src/lcthw/bstrlib.h	/^#  define BSTRLIB_NOVSNP$/;"	d
BSTR_BS_BUFF_LENGTH_GET	src/lcthw/bstrlib.h	/^#define BSTR_BS_BUFF_LENGTH_GET /;"	d
BSTR_ERR	src/lcthw/bstrlib.h	/^#define BSTR_ERR /;"	d
BSTR_OK	src/lcthw/bstrlib.h	/^#define BSTR_OK /;"	d
BSTR_VER_MAJOR	src/lcthw/bstrlib.h	/^#define BSTR_VER_MAJOR /;"	d
BSTR_VER_MINOR	src/lcthw/bstrlib.h	/^#define BSTR_VER_MINOR /;"	d
BSTR_VER_UPDATE	src/lcthw/bstrlib.h	/^#define BSTR_VER_UPDATE /;"	d
BS_BUFF_SZ	src/lcthw/bstrlib.c	/^#define BS_BUFF_SZ /;"	d	file:
CFCLEN	src/lcthw/bstrlib.c	/^#define CFCLEN /;"	d	file:
CFLAGS	Makefile	/^CFLAGS=-g -O2 -Wall -Wextra -Isrc -rdynamic -DNDEBUG $(OPTFLAGS)$/;"	m
DArray	src/lcthw/darray.h	/^typedef struct DArray$/;"	s
DArray	src/lcthw/darray.h	/^} DArray;$/;"	t	typeref:struct:DArray
DArray_clear	src/lcthw/darray.c	/^void DArray_clear(DArray *array)$/;"	f
DArray_contract	src/lcthw/darray.c	/^int DArray_contract(DArray *array)$/;"	f
DArray_count	src/lcthw/darray.h	/^#define DArray_count(/;"	d
DArray_create	src/lcthw/darray.c	/^DArray * DArray_create(size_t element_size,size_t initial_max)$/;"	f
DArray_destroy	src/lcthw/darray.c	/^void DArray_destroy(DArray *array)$/;"	f
DArray_end	src/lcthw/darray.h	/^#define DArray_end(/;"	d
DArray_expand	src/lcthw/darray.c	/^int DArray_expand(DArray *array)$/;"	f
DArray_first	src/lcthw/darray.h	/^#define DArray_first(/;"	d
DArray_free	src/lcthw/darray.h	/^#define DArray_free(/;"	d
DArray_get	src/lcthw/darray.h	/^static inline void * DArray_get(DArray *array,int i)$/;"	f
DArray_last	src/lcthw/darray.h	/^#define DArray_last(/;"	d
DArray_max	src/lcthw/darray.h	/^#define DArray_max(/;"	d
DArray_new	src/lcthw/darray.h	/^static inline void * DArray_new(DArray *array)$/;"	f
DArray_pop	src/lcthw/darray.c	/^void * DArray_pop(DArray *array)$/;"	f
DArray_push	src/lcthw/darray.c	/^int DArray_push(DArray *array,void *el)$/;"	f
DArray_remove	src/lcthw/darray.h	/^static inline void * DArray_remove(DArray *array,int i)$/;"	f
DArray_resize	src/lcthw/darray.c	/^static inline int DArray_resize(DArray *array,size_t newsize)$/;"	f	file:
DArray_set	src/lcthw/darray.h	/^static inline void DArray_set(DArray *array,int i,void *el)$/;"	f
DEFAULT_EXPAND_RATE	src/lcthw/darray.h	/^#define DEFAULT_EXPAND_RATE /;"	d
DEFAULT_NUMBER_OF_BUCKETS	src/lcthw/hashmap.h	/^#define DEFAULT_NUMBER_OF_BUCKETS /;"	d
Hashmap	src/lcthw/hashmap.h	/^typedef struct Hashmap$/;"	s
Hashmap	src/lcthw/hashmap.h	/^} Hashmap;$/;"	t	typeref:struct:Hashmap
HashmapNode	src/lcthw/hashmap.h	/^typedef struct HashmapNode$/;"	s
HashmapNode	src/lcthw/hashmap.h	/^} HashmapNode;$/;"	t	typeref:struct:HashmapNode
Hashmap_compare	src/lcthw/hashmap.h	/^typedef int (*Hashmap_compare)(void *a,void *b);$/;"	t
Hashmap_create	src/lcthw/hashmap.c	/^Hashmap * Hashmap_create(Hashmap_compare compare,Hashmap_hash hash)$/;"	f
Hashmap_delete	src/lcthw/hashmap.c	/^void * Hashmap_delete(Hashmap *map,void *key)$/;"	f
Hashmap_destroy	src/lcthw/hashmap.c	/^void Hashmap_destroy(Hashmap *map)$/;"	f
Hashmap_find_bucket	src/lcthw/hashmap.c	/^static inline DArray * Hashmap_find_bucket(Hashmap *map,void *key,int create,uint32_t *hash_out)$/;"	f	file:
Hashmap_get	src/lcthw/hashmap.c	/^void * Hashmap_get(Hashmap *map,void *key)$/;"	f
Hashmap_get_node	src/lcthw/hashmap.c	/^static inline int Hashmap_get_node(Hashmap *map,uint32_t hash,DArray *bucket,void *key)$/;"	f	file:
Hashmap_hash	src/lcthw/hashmap.h	/^typedef uint32_t (*Hashmap_hash)(void *key);$/;"	t
Hashmap_node_create	src/lcthw/hashmap.c	/^static inline HashmapNode * Hashmap_node_create(int hash,void *key,void *data)$/;"	f	file:
Hashmap_set	src/lcthw/hashmap.c	/^int Hashmap_set(Hashmap *map,void *key,void *data)$/;"	f
Hashmap_traverse	src/lcthw/hashmap.c	/^int Hashmap_traverse(Hashmap *map,Hashmap_traverse_cb traverse_cb)$/;"	f
Hashmap_traverse_cb	src/lcthw/hashmap.h	/^typedef int (*Hashmap_traverse_cb)(HashmapNode *node);$/;"	t
INITIAL_STATIC_FIND_INDEX_COUNT	src/lcthw/bstrlib.c	/^#define INITIAL_STATIC_FIND_INDEX_COUNT /;"	d	file:
LIBS	Makefile	/^LIBS=-ldl $(OPTLIBS)$/;"	m
LONG_BITS_QTY	src/lcthw/bstrlib.c	/^#define LONG_BITS_QTY /;"	d	file:
LONG_LOG_BITS_QTY	src/lcthw/bstrlib.c	/^#define LONG_LOG_BITS_QTY /;"	d	file:
LONG_TYPE	src/lcthw/bstrlib.c	/^#define LONG_TYPE /;"	d	file:
NDEBUG	src/lcthw/hashmap.c	/^#undef NDEBUG$/;"	d	file:
NDEBUG	tests/minunit.h	/^#undef NDEBUG$/;"	d
OBJECTS	Makefile	/^OBJECTS=$(patsubst %.c,%.o,$(SOURCES))$/;"	m
PREFIX	Makefile	/^PREFIX?=\/usr\/local$/;"	m
RUN_TESTS	tests/minunit.h	/^#define RUN_TESTS(/;"	d
SOURCES	Makefile	/^SOURCES=$(wildcard src\/**\/*.c src\/*.c)$/;"	m
SO_TARGET	Makefile	/^SO_TARGET=$(patsubst %.a,%.so,$(TARGET)) # Shared object (linked during runtime after creation of .o file so if there's any change in .so files, you don't need to recompile your main program; however, the main program needs to be linked to the new .so file with the 'ln' command)$/;"	m
START_VSNBUFF	src/lcthw/bstrlib.c	/^#define START_VSNBUFF /;"	d	file:
TARGET	Makefile	/^TARGET=build\/liblcthw.a # Archive libraries (statically linked when you compile your program so if there's any change in the library, you need to compile and build your code again)$/;"	m
TESTS	Makefile	/^TESTS=$(patsubst %.c,%,$(TEST_SRC))$/;"	m
TEST_SRC	Makefile	/^TEST_SRC=$(wildcard tests\/*_tests.c)$/;"	m
_CRT_SECURE_NO_WARNINGS	src/lcthw/bstrlib.c	/^# define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_DArray_h	src/lcthw/darray.h	/^#define _DArray_h$/;"	d
__dbg_h__	src/lcthw/dbg.h	/^#define __dbg_h__$/;"	d
_lcthw_Hashmap_h	src/lcthw/hashmap.h	/^#define _lcthw_Hashmap_h$/;"	d
_minunit_h	tests/minunit.h	/^#define _minunit_h$/;"	d
all_tests	tests/hashmap_tests.c	/^RUN_TESTS(all_tests);$/;"	v
all_tests	tests/hashmap_tests.c	/^char * all_tests()$/;"	f
b	src/lcthw/bstrlib.c	/^	bstring b;$/;"	m	struct:genBstrList	file:
bBlockCopy	src/lcthw/bstrlib.c	/^#define bBlockCopy(/;"	d	file:
bNgetc	src/lcthw/bstrlib.h	/^typedef int (*bNgetc) (void *parm);$/;"	t
bNread	src/lcthw/bstrlib.h	/^typedef size_t (* bNread) (void *buff, size_t elsize, size_t nelem, void *parm);$/;"	t
bStream	src/lcthw/bstrlib.c	/^struct bStream {$/;"	s	file:
balloc	src/lcthw/bstrlib.c	/^int balloc (bstring b, int olen) {$/;"	f
ballocmin	src/lcthw/bstrlib.c	/^int ballocmin (bstring b, int len) {$/;"	f
bassign	src/lcthw/bstrlib.c	/^int bassign (bstring a, const_bstring b) {$/;"	f
bassignStatic	src/lcthw/bstrlib.h	/^#define bassignStatic(/;"	d
bassignblk	src/lcthw/bstrlib.c	/^int bassignblk (bstring a, const void * s, int len) {$/;"	f
bassigncstr	src/lcthw/bstrlib.c	/^int bassigncstr (bstring a, const char * str) {$/;"	f
bassignformat	src/lcthw/bstrlib.c	/^int bassignformat (bstring b, const char * fmt, ...) {$/;"	f
bassigngets	src/lcthw/bstrlib.c	/^int bassigngets (bstring b, bNgetc getcPtr, void * parm, char terminator) {$/;"	f
bassignmidstr	src/lcthw/bstrlib.c	/^int bassignmidstr (bstring a, const_bstring b, int left, int len) {$/;"	f
bcatStatic	src/lcthw/bstrlib.h	/^#define bcatStatic(/;"	d
bcatblk	src/lcthw/bstrlib.c	/^int bcatblk (bstring b, const void * s, int len) {$/;"	f
bcatcstr	src/lcthw/bstrlib.c	/^int bcatcstr (bstring b, const char * s) {$/;"	f
bchar	src/lcthw/bstrlib.h	/^#define bchar(/;"	d
bchare	src/lcthw/bstrlib.h	/^#define bchare(/;"	d
bconcat	src/lcthw/bstrlib.c	/^int bconcat (bstring b0, const_bstring b1) {$/;"	f
bconchar	src/lcthw/bstrlib.c	/^int bconchar (bstring b, char c) {$/;"	f
bcstrfree	src/lcthw/bstrlib.c	/^int bcstrfree (char * s) {$/;"	f
bdata	src/lcthw/bstrlib.h	/^#define bdata(/;"	d
bdatae	src/lcthw/bstrlib.h	/^#define bdatae(/;"	d
bdataofs	src/lcthw/bstrlib.h	/^#define bdataofs(/;"	d
bdataofse	src/lcthw/bstrlib.h	/^#define bdataofse(/;"	d
bdelete	src/lcthw/bstrlib.c	/^int bdelete (bstring b, int pos, int len) {$/;"	f
bdestroy	src/lcthw/bstrlib.c	/^int bdestroy (bstring b) {$/;"	f
bfindreplace	src/lcthw/bstrlib.c	/^int bfindreplace (bstring b, const_bstring find, const_bstring repl,$/;"	f
bfindreplacecaseless	src/lcthw/bstrlib.c	/^int bfindreplacecaseless (bstring b, const_bstring find, const_bstring repl,$/;"	f
bformat	src/lcthw/bstrlib.c	/^bstring bformat (const char * fmt, ...) {$/;"	f
bformata	src/lcthw/bstrlib.c	/^int bformata (bstring b, const char * fmt, ...) {$/;"	f
bfromStatic	src/lcthw/bstrlib.h	/^#define bfromStatic(/;"	d
bfromcstr	src/lcthw/bstrlib.c	/^bstring bfromcstr (const char * str) {$/;"	f
bfromcstralloc	src/lcthw/bstrlib.c	/^bstring bfromcstralloc (int mlen, const char * str) {$/;"	f
bfromcstrrangealloc	src/lcthw/bstrlib.c	/^bstring bfromcstrrangealloc (int minl, int maxl, const char* str) {$/;"	f
bgets	src/lcthw/bstrlib.c	/^bstring bgets (bNgetc getcPtr, void * parm, char terminator) {$/;"	f
bgetsa	src/lcthw/bstrlib.c	/^int bgetsa (bstring b, bNgetc getcPtr, void * parm, char terminator) {$/;"	f
binchr	src/lcthw/bstrlib.c	/^int binchr (const_bstring b0, int pos, const_bstring b1) {$/;"	f
binchrCF	src/lcthw/bstrlib.c	/^static int binchrCF (const unsigned char * data, int len, int pos,$/;"	f	file:
binchrr	src/lcthw/bstrlib.c	/^int binchrr (const_bstring b0, int pos, const_bstring b1) {$/;"	f
binchrrCF	src/lcthw/bstrlib.c	/^static int binchrrCF (const unsigned char * data, int pos,$/;"	f	file:
binsert	src/lcthw/bstrlib.c	/^int binsert (bstring b1, int pos, const_bstring b2, unsigned char fill) {$/;"	f
binsertStatic	src/lcthw/bstrlib.h	/^#define binsertStatic(/;"	d
binsertblk	src/lcthw/bstrlib.c	/^int binsertblk (bstring b, int pos, const void * blk, int len,$/;"	f
binsertch	src/lcthw/bstrlib.c	/^int binsertch (bstring b, int pos, int len, unsigned char fill) {$/;"	f
binstr	src/lcthw/bstrlib.c	/^int binstr (const_bstring b1, int pos, const_bstring b2) {$/;"	f
binstrcaseless	src/lcthw/bstrlib.c	/^int binstrcaseless (const_bstring b1, int pos, const_bstring b2) {$/;"	f
binstrr	src/lcthw/bstrlib.c	/^int binstrr (const_bstring b1, int pos, const_bstring b2) {$/;"	f
binstrrcaseless	src/lcthw/bstrlib.c	/^int binstrrcaseless (const_bstring b1, int pos, const_bstring b2) {$/;"	f
biseq	src/lcthw/bstrlib.c	/^int biseq (const_bstring b0, const_bstring b1) {$/;"	f
biseqStatic	src/lcthw/bstrlib.h	/^#define biseqStatic(/;"	d
biseqblk	src/lcthw/bstrlib.c	/^int biseqblk (const_bstring b, const void * blk, int len) {$/;"	f
biseqcaseless	src/lcthw/bstrlib.c	/^int biseqcaseless (const_bstring b0, const_bstring b1) {$/;"	f
biseqcaselessStatic	src/lcthw/bstrlib.h	/^#define biseqcaselessStatic(/;"	d
biseqcaselessblk	src/lcthw/bstrlib.c	/^int biseqcaselessblk (const_bstring b, const void * blk, int len) {$/;"	f
biseqcstr	src/lcthw/bstrlib.c	/^int biseqcstr (const_bstring b, const char * s) {$/;"	f
biseqcstrcaseless	src/lcthw/bstrlib.c	/^int biseqcstrcaseless (const_bstring b, const char * s) {$/;"	f
bisstemeqStatic	src/lcthw/bstrlib.h	/^#define bisstemeqStatic(/;"	d
bisstemeqblk	src/lcthw/bstrlib.c	/^int bisstemeqblk (const_bstring b0, const void * blk, int len) {$/;"	f
bisstemeqcaselessStatic	src/lcthw/bstrlib.h	/^#define bisstemeqcaselessStatic(/;"	d
bisstemeqcaselessblk	src/lcthw/bstrlib.c	/^int bisstemeqcaselessblk (const_bstring b0, const void * blk, int len) {$/;"	f
biswriteprotected	src/lcthw/bstrlib.h	/^#define biswriteprotected(/;"	d
bjoin	src/lcthw/bstrlib.c	/^bstring bjoin (const struct bstrList * bl, const_bstring sep) {$/;"	f
bjoinStatic	src/lcthw/bstrlib.h	/^#define bjoinStatic(/;"	d
bjoinblk	src/lcthw/bstrlib.c	/^bstring bjoinblk (const struct bstrList * bl, const void * blk, int len) {$/;"	f
bl	src/lcthw/bstrlib.c	/^	struct bstrList * bl;$/;"	m	struct:genBstrList	typeref:struct:genBstrList::bstrList	file:
blength	src/lcthw/bstrlib.h	/^#define blength(/;"	d
blengthe	src/lcthw/bstrlib.h	/^#define blengthe(/;"	d
blk2bstr	src/lcthw/bstrlib.c	/^bstring blk2bstr (const void * blk, int len) {$/;"	f
blk2tbstr	src/lcthw/bstrlib.h	/^#define blk2tbstr(/;"	d
bltrimws	src/lcthw/bstrlib.c	/^int bltrimws (bstring b) {$/;"	f
bmid2tbstr	src/lcthw/bstrlib.h	/^#define bmid2tbstr(/;"	d
bmidstr	src/lcthw/bstrlib.c	/^bstring bmidstr (const_bstring b, int left, int len) {$/;"	f
bninchr	src/lcthw/bstrlib.c	/^int bninchr (const_bstring b0, int pos, const_bstring b1) {$/;"	f
bninchrr	src/lcthw/bstrlib.c	/^int bninchrr (const_bstring b0, int pos, const_bstring b1) {$/;"	f
bpattern	src/lcthw/bstrlib.c	/^int bpattern (bstring b, int len) {$/;"	f
bread	src/lcthw/bstrlib.c	/^bstring bread (bNread readPtr, void * parm) {$/;"	f
breada	src/lcthw/bstrlib.c	/^int breada (bstring b, bNread readPtr, void * parm) {$/;"	f
breplace	src/lcthw/bstrlib.c	/^int breplace (bstring b1, int pos, int len, const_bstring b2,$/;"	f
brtrimws	src/lcthw/bstrlib.c	/^int brtrimws (bstring b) {$/;"	f
bsStatic	src/lcthw/bstrlib.h	/^# define bsStatic(/;"	d
bsStaticBlkParms	src/lcthw/bstrlib.h	/^#define bsStaticBlkParms(/;"	d
bsStaticMlen	src/lcthw/bstrlib.h	/^#define bsStaticMlen(/;"	d
bsbufflength	src/lcthw/bstrlib.c	/^int bsbufflength (struct bStream * s, int sz) {$/;"	f
bscb	src/lcthw/bstrlib.c	/^static int bscb (void * parm, int ofs, int len) {$/;"	f	file:
bsclose	src/lcthw/bstrlib.c	/^void * bsclose (struct bStream * s) {$/;"	f
bseof	src/lcthw/bstrlib.c	/^int bseof (const struct bStream * s) {$/;"	f
bsetstr	src/lcthw/bstrlib.c	/^int bsetstr (bstring b0, int pos, const_bstring b1, unsigned char fill) {$/;"	f
bsopen	src/lcthw/bstrlib.c	/^struct bStream * bsopen (bNread readPtr, void * parm) {$/;"	f
bspeek	src/lcthw/bstrlib.c	/^int bspeek (bstring r, const struct bStream * s) {$/;"	f
bsplit	src/lcthw/bstrlib.c	/^struct bstrList * bsplit (const_bstring str, unsigned char splitChar) {$/;"	f
bsplitcb	src/lcthw/bstrlib.c	/^int bsplitcb (const_bstring str, unsigned char splitChar, int pos,$/;"	f
bsplits	src/lcthw/bstrlib.c	/^struct bstrList * bsplits (const_bstring str, const_bstring splitStr) {$/;"	f
bsplitscb	src/lcthw/bstrlib.c	/^int bsplitscb (const_bstring str, const_bstring splitStr, int pos,$/;"	f
bsplitstr	src/lcthw/bstrlib.c	/^struct bstrList * bsplitstr (const_bstring str, const_bstring splitStr) {$/;"	f
bsplitstrcb	src/lcthw/bstrlib.c	/^int bsplitstrcb (const_bstring str, const_bstring splitStr, int pos,$/;"	f
bsread	src/lcthw/bstrlib.c	/^int bsread (bstring r, struct bStream * s, int n) {$/;"	f
bsreada	src/lcthw/bstrlib.c	/^int bsreada (bstring r, struct bStream * s, int n) {$/;"	f
bsreadln	src/lcthw/bstrlib.c	/^int bsreadln (bstring r, struct bStream * s, char terminator) {$/;"	f
bsreadlna	src/lcthw/bstrlib.c	/^int bsreadlna (bstring r, struct bStream * s, char terminator) {$/;"	f
bsreadlns	src/lcthw/bstrlib.c	/^int bsreadlns (bstring r, struct bStream * s, const_bstring term) {$/;"	f
bsreadlnsa	src/lcthw/bstrlib.c	/^int bsreadlnsa (bstring r, struct bStream * s, const_bstring term) {$/;"	f
bssplitscb	src/lcthw/bstrlib.c	/^int bssplitscb (struct bStream * s, const_bstring splitStr,$/;"	f
bssplitstrcb	src/lcthw/bstrlib.c	/^int bssplitstrcb (struct bStream * s, const_bstring splitStr,$/;"	f
bstr2cstr	src/lcthw/bstrlib.c	/^char * bstr2cstr (const_bstring b, char z) {$/;"	f
bstrList	src/lcthw/bstrlib.h	/^struct bstrList {$/;"	s
bstrListAlloc	src/lcthw/bstrlib.c	/^int bstrListAlloc (struct bstrList * sl, int msz) {$/;"	f
bstrListAllocMin	src/lcthw/bstrlib.c	/^int bstrListAllocMin (struct bstrList * sl, int msz) {$/;"	f
bstrListCreate	src/lcthw/bstrlib.c	/^struct bstrList * bstrListCreate (void) {$/;"	f
bstrListDestroy	src/lcthw/bstrlib.c	/^int bstrListDestroy (struct bstrList * sl) {$/;"	f
bstr__alloc	src/lcthw/bstrlib.c	/^#define bstr__alloc(/;"	d	file:
bstr__alloc	src/lcthw/bstrlib.c	/^void* bstr__alloc (size_t sz) {$/;"	f
bstr__free	src/lcthw/bstrlib.c	/^#define bstr__free(/;"	d	file:
bstr__memchr	src/lcthw/bstrlib.c	/^#define bstr__memchr(/;"	d	file:
bstr__memcmp	src/lcthw/bstrlib.c	/^#define bstr__memcmp(/;"	d	file:
bstr__memcpy	src/lcthw/bstrlib.c	/^#define bstr__memcpy(/;"	d	file:
bstr__memmove	src/lcthw/bstrlib.c	/^#define bstr__memmove(/;"	d	file:
bstr__memset	src/lcthw/bstrlib.c	/^#define bstr__memset(/;"	d	file:
bstr__realloc	src/lcthw/bstrlib.c	/^#define bstr__realloc(/;"	d	file:
bstrchr	src/lcthw/bstrlib.h	/^#define bstrchr(/;"	d
bstrchrp	src/lcthw/bstrlib.c	/^int bstrchrp (const_bstring b, int c, int pos) {$/;"	f
bstrcmp	src/lcthw/bstrlib.c	/^int bstrcmp (const_bstring b0, const_bstring b1) {$/;"	f
bstrcpy	src/lcthw/bstrlib.c	/^bstring bstrcpy (const_bstring b) {$/;"	f
bstricmp	src/lcthw/bstrlib.c	/^int bstricmp (const_bstring b0, const_bstring b1) {$/;"	f
bstring	src/lcthw/bstrlib.h	/^typedef struct tagbstring * bstring;$/;"	t	typeref:struct:tagbstring
bstrncmp	src/lcthw/bstrlib.c	/^int bstrncmp (const_bstring b0, const_bstring b1, int n) {$/;"	f
bstrnicmp	src/lcthw/bstrlib.c	/^int bstrnicmp (const_bstring b0, const_bstring b1, int n) {$/;"	f
bstrrchr	src/lcthw/bstrlib.h	/^#define bstrrchr(/;"	d
bstrrchrp	src/lcthw/bstrlib.c	/^int bstrrchrp (const_bstring b, int c, int pos) {$/;"	f
bsunread	src/lcthw/bstrlib.c	/^int bsunread (struct bStream * s, const_bstring b) {$/;"	f
btfromblk	src/lcthw/bstrlib.h	/^#define btfromblk(/;"	d
btfromblkltrimws	src/lcthw/bstrlib.h	/^#define btfromblkltrimws(/;"	d
btfromblkrtrimws	src/lcthw/bstrlib.h	/^#define btfromblkrtrimws(/;"	d
btfromblktrimws	src/lcthw/bstrlib.h	/^#define btfromblktrimws(/;"	d
btfromcstr	src/lcthw/bstrlib.h	/^#define btfromcstr(/;"	d
btolower	src/lcthw/bstrlib.c	/^int btolower (bstring b) {$/;"	f
btoupper	src/lcthw/bstrlib.c	/^int btoupper (bstring b) {$/;"	f
btrimws	src/lcthw/bstrlib.c	/^int btrimws (bstring b) {$/;"	f
btrunc	src/lcthw/bstrlib.c	/^int btrunc (bstring b, int n) {$/;"	f
buckets	src/lcthw/hashmap.h	/^    DArray *buckets;$/;"	m	struct:Hashmap
buff	src/lcthw/bstrlib.c	/^	bstring buff;		\/* Buffer for over-reads *\/$/;"	m	struct:bStream	file:
buildCharField	src/lcthw/bstrlib.c	/^static int buildCharField (struct charField * cf, const_bstring b) {$/;"	f	file:
bvcformata	src/lcthw/bstrlib.c	/^int bvcformata (bstring b, int count, const char * fmt, va_list arg) {$/;"	f
bvformata	src/lcthw/bstrlib.h	/^#define bvformata(/;"	d
bwriteallow	src/lcthw/bstrlib.h	/^#define bwriteallow(/;"	d
bwriteprotect	src/lcthw/bstrlib.h	/^#define bwriteprotect(/;"	d
charField	src/lcthw/bstrlib.c	/^struct charField { LONG_TYPE content[CFCLEN]; };$/;"	s	file:
charField	src/lcthw/bstrlib.c	/^struct charField { unsigned char content[CFCLEN]; };$/;"	s	file:
check	src/lcthw/dbg.h	/^#define check(/;"	d
check_debug	src/lcthw/dbg.h	/^#define check_debug(/;"	d
check_mem	src/lcthw/dbg.h	/^#define check_mem(/;"	d
clean_errno	src/lcthw/dbg.h	/^#define clean_errno(/;"	d
compare	src/lcthw/hashmap.h	/^    Hashmap_compare compare;$/;"	m	struct:Hashmap
const_bstring	src/lcthw/bstrlib.h	/^typedef const struct tagbstring * const_bstring;$/;"	t	typeref:struct:tagbstring
content	src/lcthw/bstrlib.c	/^struct charField { LONG_TYPE content[CFCLEN]; };$/;"	m	struct:charField	file:
content	src/lcthw/bstrlib.c	/^struct charField { unsigned char content[CFCLEN]; };$/;"	m	struct:charField	file:
contents	src/lcthw/darray.h	/^    void **contents;$/;"	m	struct:DArray
cstr2bstr	src/lcthw/bstrlib.h	/^#define cstr2bstr /;"	d
cstr2tbstr	src/lcthw/bstrlib.h	/^#define cstr2tbstr /;"	d
data	src/lcthw/bstrlib.h	/^	unsigned char * data;$/;"	m	struct:tagbstring
data	src/lcthw/hashmap.h	/^    void *data;$/;"	m	struct:HashmapNode
debug	src/lcthw/dbg.h	/^#define debug(/;"	d
default_compare	src/lcthw/hashmap.c	/^static int default_compare(void *a,void *b)$/;"	f	file:
default_hash	src/lcthw/hashmap.c	/^static uint32_t default_hash(void *a)$/;"	f	file:
downcase	src/lcthw/bstrlib.c	/^#define downcase(/;"	d	file:
element_size	src/lcthw/darray.h	/^    size_t element_size;$/;"	m	struct:DArray
end	src/lcthw/darray.h	/^    int end;$/;"	m	struct:DArray
entry	src/lcthw/bstrlib.h	/^    bstring * entry;$/;"	m	struct:bstrList
expand_rate	src/lcthw/darray.h	/^    size_t expand_rate;$/;"	m	struct:DArray
expect1	tests/hashmap_tests.c	/^struct tagbstring expect1 = bsStatic("THE VALUE 1");$/;"	v	typeref:struct:tagbstring
expect2	tests/hashmap_tests.c	/^struct tagbstring expect2 = bsStatic("THE VALUE 2");$/;"	v	typeref:struct:tagbstring
expect3	tests/hashmap_tests.c	/^struct tagbstring expect3 = bsStatic("THE VALUE 3");$/;"	v	typeref:struct:tagbstring
exvsnprintf	src/lcthw/bstrlib.c	/^#define exvsnprintf(/;"	d	file:
findreplaceengine	src/lcthw/bstrlib.c	/^static int findreplaceengine (bstring b, const_bstring find,$/;"	f	file:
genBstrList	src/lcthw/bstrlib.c	/^struct genBstrList {$/;"	s	file:
hash	src/lcthw/hashmap.h	/^    Hashmap_hash hash;$/;"	m	struct:Hashmap
hash	src/lcthw/hashmap.h	/^    uint32_t hash;$/;"	m	struct:HashmapNode
instr_fnptr	src/lcthw/bstrlib.c	/^typedef int (*instr_fnptr) (const_bstring s1, int pos, const_bstring s2);$/;"	t	file:
invertCharField	src/lcthw/bstrlib.c	/^static void invertCharField (struct charField * cf) {$/;"	f	file:
isEOF	src/lcthw/bstrlib.c	/^	int isEOF;			\/* track file's EOF state *\/$/;"	m	struct:bStream	file:
key	src/lcthw/hashmap.h	/^    void *key;$/;"	m	struct:HashmapNode
log_err	src/lcthw/dbg.h	/^#define log_err(/;"	d
log_info	src/lcthw/dbg.h	/^#define log_info(/;"	d
log_warn	src/lcthw/dbg.h	/^#define log_warn(/;"	d
map	tests/hashmap_tests.c	/^Hashmap *map = NULL;$/;"	v
max	src/lcthw/darray.h	/^    int max;$/;"	m	struct:DArray
maxBuffSz	src/lcthw/bstrlib.c	/^	int maxBuffSz;$/;"	m	struct:bStream	file:
mlen	src/lcthw/bstrlib.h	/^	int mlen;$/;"	m	struct:tagbstring
mlen	src/lcthw/bstrlib.h	/^    int qty, mlen;$/;"	m	struct:bstrList
mu_assert	tests/minunit.h	/^#define mu_assert(/;"	d
mu_run_test	tests/minunit.h	/^#define mu_run_test(/;"	d
mu_suite_start	tests/minunit.h	/^#define mu_suite_start(/;"	d
parm	src/lcthw/bstrlib.c	/^	void * parm;		\/* The stream handle for core stream *\/$/;"	m	struct:bStream	file:
qty	src/lcthw/bstrlib.h	/^    int qty, mlen;$/;"	m	struct:bstrList
readFnPtr	src/lcthw/bstrlib.c	/^	bNread readFnPtr;	\/* fread compatible fnptr for core stream *\/$/;"	m	struct:bStream	file:
sentinel	src/lcthw/dbg.h	/^#define sentinel(/;"	d
setInCharField	src/lcthw/bstrlib.c	/^#define setInCharField(/;"	d	file:
slen	src/lcthw/bstrlib.h	/^	int slen;$/;"	m	struct:tagbstring
snapUpSize	src/lcthw/bstrlib.c	/^static int snapUpSize (int i) {$/;"	f	file:
tagbstring	src/lcthw/bstrlib.h	/^struct tagbstring {$/;"	s
test1	tests/hashmap_tests.c	/^struct tagbstring test1 = bsStatic("test data 1");$/;"	v	typeref:struct:tagbstring
test2	tests/hashmap_tests.c	/^struct tagbstring test2 = bsStatic("test data 2");$/;"	v	typeref:struct:tagbstring
test3	tests/hashmap_tests.c	/^struct tagbstring test3 = bsStatic("test data 3");$/;"	v	typeref:struct:tagbstring
testInCharField	src/lcthw/bstrlib.c	/^#define testInCharField(/;"	d	file:
test_create	tests/hashmap_tests.c	/^char * test_create()$/;"	f
test_delete	tests/hashmap_tests.c	/^char * test_delete()$/;"	f
test_destroy	tests/hashmap_tests.c	/^char * test_destroy()$/;"	f
test_get_set	tests/hashmap_tests.c	/^char * test_get_set()$/;"	f
test_traverse	tests/hashmap_tests.c	/^char * test_traverse()$/;"	f
tests_run	tests/minunit.h	/^int tests_run;$/;"	v
traverse_called	tests/hashmap_tests.c	/^static int traverse_called = 0;$/;"	v	file:
traverse_fail_cb	tests/hashmap_tests.c	/^static int traverse_fail_cb(HashmapNode *node)$/;"	f	file:
traverse_good_cb	tests/hashmap_tests.c	/^static int traverse_good_cb(HashmapNode *node)$/;"	f	file:
upcase	src/lcthw/bstrlib.c	/^#define   upcase(/;"	d	file:
wspace	src/lcthw/bstrlib.c	/^#define   wspace(/;"	d	file:
